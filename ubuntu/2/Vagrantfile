# -*- mode: ruby -*-
# vi: set ft=ruby :

#
# Docker, kubernetes, java, mysql workstation configuration.
# 02-Aug-2017 Igor Azarny (iazarny@yahoo.com)
# 18-Jul-2019 Igor Azarny (iazarny@yahoo.com)


Vagrant.configure("2") do |config|
    #config.vm.box = "ubuntu/xenial64"
    config.vm.box = "generic/fedora27"

    config.vm.hostname = "MSStarter-2"
    config.vm.boot_timeout = 120
    config.ssh.insert_key = false
    # in case of problems during provision (vagrant cannot login to vm box) uncomment 2 lines below
    #config.ssh.username = "vagrant"
    #config.ssh.password = "vagrant"

    config.vm.network :private_network, type: "dhcp"
    config.vm.network "forwarded_port", guest: 9999, host: 9999
    config.vm.network "forwarded_port", guest: 8080, host: 8080
    config.vm.network "forwarded_port", guest: 22222, host: 22222
    config.vm.network "forwarded_port", guest: 20000, host: 20000
    config.vm.network "forwarded_port", guest: 80, host: 80
    config.vm.network "forwarded_port", guest: 443, host: 443
    config.vm.network "forwarded_port", guest: 22, host: 22
    config.vm.network "forwarded_port", guest: 8443, host: 8443
    config.vm.network "forwarded_port", guest: 10250, host: 10250


    config.vm.provider :libvirt do |libvirt|
        libvirt.uri = 'qemu+unix:///system'
        libvirt.memory = 6144
        libvirt.cpus = 2
	    libvirt.cpu_feature :name => 'x2apic', :policy => 'disable'
        libvirt.graphics_type = "spice"
        libvirt.video_type = "qxl"
    end


    config.vm.provider "virtualbox" do |vb|
        vb.name = "MSStarter-2"
        vb.gui = true
        vb.memory = "6144"
        vb.cpus = 2
    end

    #config.vm.provision :shell, inline: "mkdir -p /home/vagrant/.m2 && chown vagrant:vagrant /home/vagrant/.m2"
    config.vm.provision "shell", inline: <<-SHELL
        apt-get update
#tools
        yum install  -y git
        yum install  -y  wget
        yum install   -y curl
        yum install   -y net-tools
        yum install  -y  mc
        yum install   -y unzip
	yum install   -y jq
        #yum install  apache2

#java
        dnf search openjdk
        dnf install -y java-1.8.0-openjdk.x86_64

        wget http://www-eu.apache.org/dist/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz
        tar xzvf apache-maven-3.6.1-bin.tar.gz -C /usr/local/
        ln -s /usr/local/apache-maven-3.6.1/bin/mvn /usr/bin/mvn

#docker

        
        dnf install -y docker
        systemctl enable docker.service
        systemctl start docker.service
        
#        usermod -aG docker vagrant

#        newgrp docker
        
        docker run hello-world
        export DOCKER_OPTS="$DOCKER_OPTS --insecure-registry=localhost:5000"
        docker run -d -p 5000:5000 --restart=always --name registry registry:2
        service docker restart
        docker pull alpine
        docker tag alpine localhost:5000/local-alpne
        docker push localhost:5000/local-alpine

#k8s
        curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube
        install minikube /usr/local/bin
        curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
        chmod +x kubectl
        mv ./kubectl /usr/local/bin/kubectl

        #minikube start
        minikube start --vm-driver=none

#build

#git clone https://github.com/iazarny/msstarter2.git
#mvn clean install fabric8:build fabric8:push
      
    SHELL


end
